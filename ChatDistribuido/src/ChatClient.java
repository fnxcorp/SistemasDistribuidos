
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashSet;
import javax.swing.JOptionPane;
import javax.swing.Timer;

public class ChatClient extends javax.swing.JFrame {

    ChatDB service;
    static String registry = "localhost";
    static int port = 1099;
    static final String RMI_URL = "rmi://%s:%s/%s"; // rmi://registry:port/service
    static String rmiUrl; // rmiUrl of actual server
    ServerManagement serverListService; //main service 

    final Timer timer = new Timer(1000, null);
    ActionListener listener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                //messages
                getAndSetMessages();
                //users                
                getAndSetUsers();
            } catch (RemoteException ex) {
                timer.removeActionListener(this);
                timer.stop();
                reconnect();
            }
        }
    };

    private void getAndSetMessages() throws RemoteException {
        StringBuilder msgs = new StringBuilder();
        ArrayList<Message> messages = service.getMessages();
        for (Message m : messages) {
            msgs.append(m.toString()).append(System.lineSeparator());
        }
        messages_ta.setText(msgs.toString());
    }

    private void getAndSetUsers() throws RemoteException {
        HashSet<String> users = service.getUsers();
        StringBuilder usrs = new StringBuilder();
        for (String user : users) {
            usrs.append(user).append(System.lineSeparator());
        }
        users_ta.setText(usrs.toString());
    }

    private void reconnect() {
        try {
            serverListService.removeBackupServer(rmiUrl);
            rmiUrl = serverListService.getNextAvailableServer();
            if (rmiUrl != null) {
                System.out.println("Reconnecting to " + rmiUrl);
                Remote remoteService = Naming.lookup(rmiUrl);
                service = (ChatDB) remoteService;
                if (!timer.isRunning()) {
                    timer.addActionListener(listener);
                    timer.start();
                }
            }
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            ex.printStackTrace(System.err);
        }
    }

    private void init() {
        try {
            message_txt.setEnabled(false);
            send_msg_btn.setEnabled(false);
            String serverListReg = String.format(RMI_URL, registry, port, "ServerList");
            //connect to BackupListServer to get the next available server
            serverListService = (ServerManagement) Naming.lookup(serverListReg);
            rmiUrl = serverListService.getNextAvailableServer();
            Remote remoteService = Naming.lookup(rmiUrl);
            service = (ChatDB) remoteService;
            timer.addActionListener(listener);
            timer.start();
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            ex.printStackTrace(System.err);
        }
    }

    /**
     * Creates new form ChatClient
     */
    public ChatClient() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        messages_ta = new javax.swing.JTextArea();
        send_msg_btn = new javax.swing.JButton();
        message_txt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        get_msgs_btn = new javax.swing.JButton();
        user_txt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        users_ta = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        connect_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        messages_ta.setColumns(20);
        messages_ta.setRows(5);
        jScrollPane1.setViewportView(messages_ta);

        send_msg_btn.setText("Send");
        send_msg_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send_msg_btnActionPerformed(evt);
            }
        });

        jLabel1.setText("Mensaje");

        jLabel2.setText("Chat");

        get_msgs_btn.setText("Get Messages");
        get_msgs_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_msgs_btnActionPerformed(evt);
            }
        });

        user_txt.setText("test");

        jLabel3.setText("Usuario");

        users_ta.setColumns(20);
        users_ta.setRows(5);
        jScrollPane2.setViewportView(users_ta);

        jLabel4.setText("Lista de Usuarios");

        connect_btn.setText("Conectar");
        connect_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connect_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(message_txt)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(send_msg_btn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(get_msgs_btn))
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(user_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(connect_btn)))
                        .addGap(0, 121, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(user_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(connect_btn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(message_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(send_msg_btn)
                            .addComponent(get_msgs_btn)))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void send_msg_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send_msg_btnActionPerformed
        try {
            service.addMessage(user_txt.getText(), message_txt.getText());
            getAndSetMessages();
        } catch (RemoteException ex) {
//            ex.printStackTrace(System.err);
            System.out.printf("Error - %s : %s%n", ex.getClass(), ex.getMessage());
            reconnect();
        }
    }//GEN-LAST:event_send_msg_btnActionPerformed

    private void get_msgs_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_msgs_btnActionPerformed
        try {
            getAndSetMessages();
        } catch (RemoteException ex) {
//            ex.printStackTrace(System.err);
            System.out.printf("Error - %s : %s%n", ex.getClass(), ex.getMessage());
            reconnect();
        }
    }//GEN-LAST:event_get_msgs_btnActionPerformed

    private void connect_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connect_btnActionPerformed
        try {
            String userName = user_txt.getText().trim();
            if ("Conectar".equals(connect_btn.getText())) {
                if (service.addUser(userName)) {
                    user_txt.setEnabled(false);
                    message_txt.setEnabled(true);
                    send_msg_btn.setEnabled(true);
                    connect_btn.setText("Desconectar");
                } else {
                    JOptionPane.showMessageDialog(this, "Usuario Conectado");
                }
            } else { //Disconnect
                user_txt.setEnabled(true);
                message_txt.setEnabled(false);
                send_msg_btn.setEnabled(false);
                service.removeUser(userName);
                connect_btn.setText("Conectar");
            }
        } catch (RemoteException ex) {
            System.out.printf("Error - %s : %s%n", ex.getClass(), ex.getMessage());
            reconnect();
        }
    }//GEN-LAST:event_connect_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        if (args.length >= 1) {
            registry = args[0];
            if (args.length >= 2) {
                port = Integer.parseInt(args[1]);
            }
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ChatClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connect_btn;
    private javax.swing.JButton get_msgs_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField message_txt;
    private javax.swing.JTextArea messages_ta;
    private javax.swing.JButton send_msg_btn;
    private javax.swing.JTextField user_txt;
    private javax.swing.JTextArea users_ta;
    // End of variables declaration//GEN-END:variables
}
